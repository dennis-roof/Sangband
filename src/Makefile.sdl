# File: Makefile.sdl

#
# This makefile is designed for those compiling the SDL port on Unix and similiar systems.
#

#
# These comments, however, are for SDL newbies using any OS.
#
# Required:
#
# - SDL (v1.2.11+) and SDL_ttf (v2.0++).
# - SDL_Mixer is optional and gets you sound and music.  (Note:  On some systems you 
#   may require Timidity in order to play .mid-format songs; read the SDL_Mixer docs).
#
#
# General:
#
# - All the goodies are at:  http://www.libsdl.org
# - Well-written FAQs for multiple OSs are at:  
#   "http://www.libsdl.org/faq.php" and 
#   "http://lazyfoo.net/SDL_tutorials/lesson01/index.php"
# - Extra libraries are at "http://www.libsdl.org/libraries.php".
# - It is recommended that you compile at least one of the SDL test programs 
#   to verify that you have a development environment ready to use SDL.  If you
#   are a newbie, *** don't try to do everything at once! ***
#
#
# Linux and similar:
#
# - SDL is easy on Linux.  Read the SDL Linux FAQ.  Download and install (at 
#   least) the development libraries.
#
# - Try compiling, using this makefile - it may (dream on!) work first time.  If 
#   it doesn't, verify that X11 exists on your system, that all needed SDL 
#   libraries exist and are placed where the makefile expects them to be, and 
#   that you have all necessary permissions.
#
#
# Windows:
#
# - SDL is also (fairly) easy on Windows.  You need both the user and 
#   development libraries.  The first get distributed with the game; the second 
#   you need to link to when compiling.
#
#   The Borland Commandline Tools:
#
#   - Open the file "Makefile.bcc" and un-comment the lines "SDLOPTS" and 
#     "SDLLIBS".  Edit "SDLOPTS" to reflect the exact location of the 
#     *Borland-specific* SDL development libraries.
#   - Navigate to the source folder and type the command "make -f Makefile.bcc 
#     install clean".  If you get errors, read "Makefile.bcc" in addition to 
#     the SDL and Borland docs.
#
#   Microsoft Visual C++:
#
#  - Read a FAQ or two. "http://lazyfoo.net/SDL_tutorials/lesson01/index.php" 
#    is especially good.
#
#  - Add all of the .c and .h files to the project, with the exception of main 
#    files other than "main-sdl.c".  Add all of the files in "/src/win".
#
#   The following may not be exact for your version, so be prepared to fiddle 
#   round some (I had to).
#   - In <menu> -> Project -> Settings:
#     Tab C/C++ -> General, Preprocessor definitions:  add "USE_SDL" 
#         (within quotes)
#     Tab C/C++ -> Code Generation, Use run-time library:  change to "Use 
#         Multithreaded DLL".
#     Tab C/C++ -> Preprocessor, Additional include directories:  add 
#        "<your base SDL directory>,<your base SDL directory>\include"
#     Tab Link -> General:  add to the list of libraries
#        " SDL.lib SDLmain.lib SDL_ttf.lib SDL_mixer.lib", plus any other 
#        libraries listed in main-sdl.c.  (An clumsier method is to add the 
#        libraries to the list of files in your project).
#
#   Bloodshed Dev-C++:
#
#  - There may be FAQs available online.
#  - Add all of the .c and .h files to the project, with the exception of main 
#    files other than "main-sdl.c".  Add all of the files in "/src/win" (except 
#    sangband.ico).
#
#   The following may not be exact for your version, so be prepared to fiddle 
#   round some (I had to).
#   - In <menu> -> Project -> Project Options:
#     Tab General:  Set type to "Win32 Console".
#     Tab General:  Set icon to "src/win/sangband.ico".
#     Tab Parameters -> section Compiler:  add "-DUSE_SDL" (within quotes)
#     Tab Parameters -> section Linker:  add 
#        -lmingw32 
#        ../../coding/Dev-Cpp/lib/libwinmm.a
#        -lSDLmain -lSDL -lSDL_ttf -lSDL_mixer (plus any others desired)
#        -mwindows
#     Tab Directories -> tab Library Directories:  add
#        <<location of SDL>>\lib
#        <<location of SDL>>\include
#        <<location of Dev-Cpp>>\include\SDL
#     Tab Directories -> tab Include Directories:  add
#        <<location of SDL>>\include
#        <<location of Dev-Cpp>>\include\SDL
#
#
# Macintosh, OpenBSD, etc:
#
#   If compiling on OpenBSD, use "gmake" instead of "make".
#
#
# Icons:
#
#  - You will find application icons in the src/win and src/unix directories.
#

#
# The "source" and "object" files.
#

SRCS = \
  attack.c birth.c cave.c cmd1.c cmd2.c \
  cmd3.c cmd4.c cmd5.c cmd6.c \
  dungeon.c effects.c files.c generate.c history.c info.c init1.c \
  init2.c loadsave.c monattk.c monmove.c \
  monster1.c monster2.c obj_make.c object1.c \
  object2.c quest.c randart.c skills.c spells1.c \
  spells2.c spells3.c store.c tables.c talents.c \
  traps.c util.c main-sdl.c intrface.c \
  variable.c wizard1.c wizard2.c xtra1.c \
  xtra2.c z-file.c z-form.c z-rand.c z-term.c \
  z-util.c z-virt.c 

OBJS = \
  attack.o birth.o cave.o cmd1.o cmd2.o \
  cmd3.o cmd4.o cmd5.o cmd6.o \
  dungeon.o effects.o files.o generate.o history.o info.o init1.o \
  init2.o loadsave.o monattk.o monmove.o \
  monster1.o monster2.o obj_make.o object1.o \
  object2.o quest.o randart.o skills.o spells1.o \
  spells2.o spells3.o store.o tables.o talents.o \
  traps.o util.o main-sdl.o intrface.o \
  variable.o wizard1.o wizard2.o xtra1.o \
  xtra2.o z-file.o z-form.o z-rand.o z-term.o \
  z-util.o z-virt.o 


#
# This is my compiler of choice, it seems to work most everywhere.
#
CC = gcc



##
## Variation -- Use "main-sdl.c"
##
CFLAGS = -Wall -pipe -s -O2 \
	-D"USE_SDL" -D"HAVE_MKSTEMP" -I/usr/include/SDL

#
# (see src/config.h for defines)
#


#
# Default target.
#
all: sangband
	mv sangband ..

#
# Install the game (copy instead of move).
#
install: sangband
	cp sangband ..


# 
# Find out where SDL is installed to
#
SDL_CFLAGS := $(shell sdl-config --cflags)
SDL_LIBS := $(shell sdl-config --libs)

# Request it
LIBS = -lSDL_ttf -lSDL_mixer

#
# Build the "Sangband" program
#
sangband: $(OBJS) 
		$(CC) $(SDL_CFLAGS) $(CFLAGS) -o sangband $(OBJS) $(LIBS) $(SDL_LIBS)




#
# Clean up old junk
#

clean:
	-rm -f *.o sangband


#
# Generate dependencies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)



#
# Hack -- some file dependencies
#

HDRS = \
  h-basic.h \
  h-define.h h-type.h h-system.h h-config.h

INCS = \
  angband.h \
  config.h defines.h types.h externs.h \
  z-term.h z-rand.h z-util.h z-virt.h z-form.h z-file.h $(HDRS)


attack.o: attack.c $(INCS)
birth.o: birth.c $(INCS)
borgdumb.o: borgdumb.c $(INCS) borgdumb.h
cave.o: cave.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS)
cmd6.o: cmd6.c $(INCS)
dungeon.o: dungeon.c $(INCS)
files.o: files.c $(INCS)
generate.o: generate.c $(INCS)
info.o: info.c $(INCS)
init1.o: init1.c $(INCS) init.h
init2.o: init2.c $(INCS) init.h
intrface.o: intrface.c $(INCS) intrface.h
loadsave.o: loadsave.c $(INCS)
main-sdl.o: main-sdl.c $(INCS) intrface.h
monmove.o: monmove.c $(INCS)
monattk.o: monattk.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
obj_make.o: obj_make.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
quest.o: quest.c $(INCS)
randart.o: randart.c $(INCS) init.h
skills.o: skills.c $(INCS)
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
spells3.o: spells3.c $(INCS)
store.o: store.c $(INCS)
tables.o: tables.c $(INCS)
talents.o: talents.c $(INCS)
traps.o: traps.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS)
xtra1.o: xtra1.c $(INCS)
xtra2.o: xtra2.c $(INCS)
z-file.o: z-file.c $(HDRS) z-file.h
z-form.o: z-form.c $(HDRS) z-form.h z-util.h z-virt.h
z-rand.o: z-rand.c $(HDRS) z-rand.h
z-term.o: z-term.c $(HDRS) z-term.h z-virt.h
z-util.o: z-util.c $(HDRS) z-util.h
z-virt.o: z-virt.c $(HDRS) z-virt.h z-util.h

