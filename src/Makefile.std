# File: Makefile.std

# This is not a very "nice" Makefile, but it usually works.

#
# UNIX makefile for Sangband.  At present, only the following UNIX-
# specific ports are up to date:
#
# main-gcu
#
#
# For the cross-platform SDL port, see "makefile.sdl".
# For other ports, see the compilation instructions.
#
# To use this makefile on BSD, use "gmake" instead of "make".
#
#
# Note that you may have to make modifications below according
# to your machine, available libraries, compilation options,
# and your "visual module" of choice.
#
# If you are able to construct "main-xxx.c" and/or "Makefile.xxx"
# files for a currently unsupported system, please send them to
# Leon Marrick < sang (at) runegold (dot) org > for inclusion in 
# future versions.
#


#
# The "source" and "object" files.
#

SRCS = \
  main.c \
  main-gcu.c \
  main-x11.c \
  main-gtk.c \
  maid-x11.c \
  attack.c \
  birth.c \
  cave.c \
  cmd1.c \
  cmd2.c \
  cmd3.c \
  cmd4.c \
  cmd5.c \
  cmd6.c \
  dungeon.c \
  effects.c \
  files.c \
  generate.c \
  history.c \
  info.c \
  init1.c \
  init2.c \
  loadsave.c \
  monmove.c \
  monattk.c \
  monster1.c \
  monster2.c \
  obj_make.c \
  object1.c \
  object2.c \
  quest.c \
  randart.c \
  skills.c \
  spells1.c \
  spells2.c \
  spells3.c \
  store.c \
  tables.c \
  talents.c \
  traps.c \
  util.c \
  variable.c \
  wizard1.c \
  wizard2.c \
  xtra1.c \
  xtra2.c \
  z-term.c \
  z-rand.c \
  z-form.c \
  z-virt.c \
  z-util.c \
  z-file.c


OBJS = \
  main.o \
  main-gcu.o \
  attack.o \
  birth.o \
  cave.o \
  cmd1.o \
  cmd2.o \
  cmd3.o \
  cmd4.o \
  cmd5.o \
  cmd6.o \
  dungeon.o \
  effects.o \
  files.o \
  generate.o \
  history.o \
  info.o \
  init1.o \
  init2.o \
  loadsave.o \
  monmove.o \
  monattk.o \
  monster1.o \
  monster2.o \
  obj_make.o \
  object1.o \
  object2.o \
  quest.o \
  randart.o \
  skills.o \
  spells1.o \
  spells2.o \
  spells3.o \
  store.o \
  tables.o \
  talents.o \
  traps.o \
  util.o \
  variable.o \
  wizard1.o \
  wizard2.o \
  xtra1.o \
  xtra2.o \
  z-term.o \
  z-rand.o \
  z-form.o \
  z-virt.o \
  z-util.o \
  z-file.o
#  main-x11.o \
#  main-gtk.o \
#  maid-x11.o \



##
## Following are some "system" definitions
##
## No changes are needed to compile a version that will run on both
## X11 and Curses, in debugging mode, with maximal warnings, on many
## normal Unix machines of the Sun OS variety (non-solaris).
##
## To use an "alternative" definition, simply "modify" (or "replace")
## the definition below with one that you like.  For example, you can
## change the compiler to "cc", or remove the "debugging" options, or
## remove the X11 or Curses support, etc, as desired.
##
## See also "config.h" and "h-config.h" for important information.
##
## Some "examples" are given below, they can be used by simply
## removing the FIRST column of "#" signs from the "block" of lines
## you wish to use, and commenting out "standard" block below.
##
## This is not intended to be a "good" Makefile, just a "simple" one.
##


#
# This is my compiler of choice, it seems to work most everywhere.
#
CC = gcc


#
# Standard version (see main-x11.c and main-gcu.c)
#
# This version supports both "X11" and "curses" in a single executable.
#
# You may have to add various X11 include/library directories to the
# "CFLAGS", if your machine places files in a weird location.
#
# You may be able to remove "-ltermcap" on some machines (ex: Solaris).
#
# You may have to replace "-lcurses" with "-lncurses" to use the
# "new curses" library instead of the "old curses" library, and
# you may have to add "-I/usr/include/ncurses" to the "CFLAGS".
#
# See "main-gcu.c" and "config.h" for some optional "curses" defines,
# including "USE_GETCH" and "USE_CURS_SET".  Note that "config.h" will
# attempt to "guess" at many of these flags based on your system.
#
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU"
#LIBS = -lX11 -lcurses -ltermcap


##
## Variation -- Only support "main-x11.c" (not "main-gcu.c")
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11"
#LIBS = -lX11


##
## Variation -- Only support "main-gcu.c" (not "main-x11.c")
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU"
#LIBS = -lcurses -ltermcap


##
## Variation -- Use "main-xaw.c" instead of "main-x11.c"
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_XAW" -D"USE_GCU"
#LIBS = -lXaw -lXmu -lXt -lX11 -lcurses -ltermcap


##
## Variation -- Use "main-gtk.c" instead of "main-x11.c"
## Note: pkg-config adds GTK and X11 includes and libraries as appropriate.
##
#CFLAGS = -Wall -O `pkg-config --cflags gtk+-2.0` -g -D"USE_GTK" -D"USE_GCU"
#LIBS = `pkg-config --libs gtk+-2.0` -lcurses -ltermcap


##
## Variation -- compile for Linux
##
## Allows the use of Angband in the console using ncurses.
##
CFLAGS = -I/usr/include/ncurses -Wall \
         -D"USE_GCU" -D"USE_NCURSES" -DHAVE_MKSTEMP
LIBS = -lncurses


##
## Variation -- compile for Linux
##
## Use ncurses & X11.
##
#CFLAGS = -I/usr/X11R6/include -I/usr/include/ncurses -Wall \
#         -D"USE_X11" -D"USE_GCU" -D"USE_NCURSES" -DHAVE_MKSTEMP -g
#LIBS = -L/usr/X11R6/lib -lX11 -lncurses


##
## Variation -- compile for Linux
##
## Use ncurses, X11 & GTK.
##
#CFLAGS = -I/usr/X11R6/include -I/usr/include/ncurses -Wall \
#         -D"USE_X11" -D"USE_GCU" -D"USE_NCURSES" -DHAVE_MKSTEMP -g \
#	 -D"USE_GTK" `pkg-config --cflags gtk+-2.0`
#LIBS = -L/usr/X11R6/lib -lX11 -lncurses `pkg-config --libs gtk+-2.0`


##
## Variation -- compile for Linux
##
## Allows the use of Angband in the console using curses.
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -D"USE_GCU"
#LIBS = -lcurses


##
## Variation -- compile for Linux
##
## Allows the use of Angband in X11 using the Athena Widget set.
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g -D"USE_XAW"
#LIBS = -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11


##
## Variation -- this might work better than the suggestion above
##
#CFLAGS = -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS = -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- compile for Solaris
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS = -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS = -lX11 -lcurses -ltermcap -lsun


##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##
#CC     = cc
##CFLAGS = -std -O -g3 -Olimit 4000 -D"USE_X11" -D"USE_GCU"
#CFLAGS = -std -g -D"USE_X11" -D"USE_GCU"
#LIBS   = -lX11 -lcurses -ltermcap -lrpcsvc


##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS = -lX11 -lcurses -lnsl_s -linet -lcposix


##
## Variation -- Support fat binaries under NEXTSTEP
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU" -arch m68k -arch i386
#LIBS = -lcurses -ltermcap


#
# Default target.
#
all: sangband


#
# Install the game.
#

install: sangband
	cp sangband ..


#
# Build the "Angband" program
#

sangband: $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o sangband $(OBJS) $(LIBS)


#
# Clean up old junk
#

clean:
	-rm -f *.o sangband


#
# Generate dependencies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


#
# Hack -- some file dependencies
#

HDRS = \
  h-basic.h \
  h-define.h h-type.h h-system.h h-config.h

INCS = \
  angband.h \
  config.h defines.h types.h externs.h \
  z-term.h z-rand.h z-util.h z-virt.h z-form.h $(HDRS)


main.o: main.c $(INCS) main.h
main-gcu.o: main-gcu.c $(INCS) main.h
main-x11.o: main-x11.c $(INCS) main.h maid-x11.h
main-gtk.o: main-gtk.c $(INCS) main.h maid-x11.h
maid-x11.o: maid-x11.c $(INCS) maid-x11.h
attack.o: attack.c $(INCS)
birth.o: birth.c $(INCS)
cave.o: cave.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS)
cmd6.o: cmd6.c $(INCS)
dungeon.o: dungeon.c $(INCS)
effects.o: effects.c $(INCS)
files.o: files.c $(INCS)
generate.o: generate.c $(INCS)
info.o: info.c $(INCS)
init1.o: init1.c $(INCS) init.h
init2.o: init2.c $(INCS) init.h
loadsave.o: loadsave.c $(INCS)
monattk.o: monattk.c $(INCS)
monmove.o: monmove.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
obj-make.o: obj-make.c $(INCS)
quest.o: quest.c $(INCS)
randart.o: randart.c $(INCS) init.h
skills.o: skills.c $(INCS)
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
spells3.o: spells3.c $(INCS)
store.o: store.c $(INCS)
tables.o: tables.c $(INCS)
talents.o: talents.c $(INCS)
traps.o: traps.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS)
xtra1.o: xtra1.c $(INCS)
xtra2.o: xtra2.c $(INCS)
z-form.o: z-form.c $(HDRS) z-form.h z-util.h z-virt.h
z-rand.o: z-rand.c $(HDRS) z-rand.h
z-term.o: z-term.c $(HDRS) z-term.h z-virt.h
z-util.o: z-util.c $(HDRS) z-util.h
z-virt.o: z-virt.c $(HDRS) z-virt.h z-util.h
z-file.o: z-file.c $(HDRS) z-file.h
